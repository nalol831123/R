colnames(abc) <- c("word", as.character(i))
if(i == 1){
SBTDF <- abc}
else{
SBTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
install.packages("jiebaR")
install.packages("jiebaR")
library(jiebaR)
library(jiebaRD)
library(jiebaR)
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
library(bitops)
library(httr)
library(RCurl)
library(XML)
library(NLP)
library(tm)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(dplyr)
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
title <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
title.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlValue)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
title <- rbind(title, as.matrix(title.list))
}
data <- unlist(data)
title <- unlist(title)
head(data)
head(title)
Hito <- c()
Hito.url <- c()
HitoT <- grep("綜藝大熱門", title)
Hito <- c(Hito,title[HitoT])
Hito.url <- c(Hito.url, data[HitoT])
SB <- c()
SB.url <- c()
SBT <- grep("小明星大跟班", title)
SB <- c(SB,title[SBT])
SB.url <- c(SB.url, data[SBT])
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
pr <- predict(model, test,  OOB=TRUE, type = "response")
install.packages("xgboost")
library(xgboost)
library(Matrix)
set.seed(1234)
train <- read.csv("train.csv")
test  <- read.csv("test.csv")
setwd("C:/Users/User/Desktop/R/R/project2－Santander Customer Satisfaction")
train <- read.csv("train.csv")
test  <- read.csv("test.csv")
train$ID <- NULL
test.id <- test$ID
test$ID <- NULL
maxmin <- data.frame()
i <- 1
for(c in (names(train))){
maxmin[i,1] <- min(train[train$TARGET==1,c])
maxmin[i,2] <- max(train[train$TARGET==1,c])
i=i+1
}
row.names(maxmin) <- names(train)
names(maxmin) <- c('min', 'max')
View(maxmin)
train.y <- train$TARGET
train$TARGET <- NULL
count0 <- function(x) {
return( sum(x == 0) )
}
train$n0 <- apply(train, 1, FUN=count0)
test$n0 <- apply(test, 1, FUN=count0)
cat("\n## Removing the constants features.\n")
for (f in names(train)) {
if (length(unique(train[[f]])) == 1) {
cat(f, "is constant in train. We delete it.\n")
train[[f]] <- NULL
test[[f]] <- NULL
}
}
features_pair <- combn(names(train), 2, simplify = F)
toRemove <- c()
for(pair in features_pair) {
f1 <- pair[1]
f2 <- pair[2]
if (!(f1 %in% toRemove) & !(f2 %in% toRemove)) {
if (all(train[[f1]] == train[[f2]])) {
cat(f1, "and", f2, "are equals.\n")
toRemove <- c(toRemove, f2)
}
}
}
feature.names <- setdiff(names(train), toRemove)
train$var38 <- log(train$var38)
test$var38 <- log(test$var38)
maxmin['var38', 'min'] <- log(maxmin['var38', 'min'])
maxmin['var38', 'max'] <- log(maxmin['var38', 'max'])
train <- train[, feature.names]
test <- test[, feature.names]
#---limit vars in test based on min and max vals of train
print('Setting min-max lims on test data')
for(f in colnames(train)){
lim <- min(train[,f])
test[test[,f]<lim,f] <- lim
lim <- max(train[,f])
test[test[,f]>lim,f] <- lim
}
#---
train$TARGET <- train.y
train <- sparse.model.matrix(TARGET ~ ., data = train)
dtrain <- xgb.DMatrix(data=train, label=train.y)
watchlist <- list(train=dtrain)
param <- list(  objective           = "binary:logistic",
booster             = "gbtree",
eval_metric         = "auc",
eta                 = 0.0202048,
max_depth           = 5,
subsample           = 0.6815,
colsample_bytree    = 0.701
)
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 560,
verbose             = 1,
watchlist           = watchlist,
maximize            = FALSE
)
test$TARGET <- -1
test_cp <- test
test_cp$TARGET <- NULL
test_cp$n0 <- NULL
test <- sparse.model.matrix(TARGET ~ ., data = test)
preds <- predict(clf, test)
### Frequentist cut
for(c in names(test_cp)){
preds[test_cp[c] < maxmin[c, 'min']] = 0.0001
preds[test_cp[c] > maxmin[c, 'max']] = 0.0001
}
### Submission
submission <- data.frame(ID=test.id, TARGET=preds)
cat("saving the submission file\n")
write.csv(submission, "submission.csv", row.names = F)
library(data.table)
library(Matrix)
library(xgboost)
library(caret)
library(dplyr)
setwd("C:/Users/User/Desktop/R/R/project2－Santander Customer Satisfaction/xgboost")
df_train <- fread('train.csv', sep=",", na.strings = "NA")
df_test  <- fread('test.csv' , sep=",", na.strings = "NA")
View(df_train)
df_test %>% summarise_each(funs(sum(is.na(.))))
df_train %>% summarise_each(funs(sum(is.na(.))))
df_test[is.na(df_test$Age),"Age"] <- mean(df_test$Age, na.rm = TRUE)
df_train[is.na(df_train$Age),"Age"] <- mean(df_train$Age, na.rm = TRUE)
View(df_train)
View(df_train)
View(df_test)
data = rbind(df_train,df_test,fill=T)
View(data)
data$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
data$Title[data$Title == 'Mlle']        <- 'Miss'
data$Title[data$Title == 'Ms']          <- 'Miss'
data$Title[data$Title == 'Mme']         <- 'Mrs'
data$Title[data$Title %in% rare_title]  <- 'Rare Title'
data$Surname <- sapply(data$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
View(data)
data$Fsize <- data$SibSp + data$Parch + 1
data$FsizeD[data$Fsize == 1] <- 'singleton'
data$FsizeD[data$Fsize < 5 & data$Fsize > 1] <- 'small'
data$FsizeD[data$Fsize > 4] <- 'large'
data$isAlone <- 0
data[data$Fsize == 1,"isAlone"] <- 1
data$Deck <- factor(sapply(data$Cabin, function(x) unlist(strsplit(x, NULL)[[1]][1])))
data <- data[,-c("Ticket","Name","Surname", "Cabin", "Deck")]
ohe_feats = c('Pclass', "Sex",'SibSp' ,'Parch', 'Embarked', 'Title', 'FsizeD', 'isAlone','Fsize')
View(data)
for (f in ohe_feats){
levels = unique(data[[f]])
data[[f]] = factor(data[[f]], level = levels)
}
train = data[data$PassengerId %in% df_train$PassengerId,]
y_train <- train[!is.na(Survived),Survived]
train = train[,Survived:=NULL]
train = train[,PassengerId:=NULL]
train_sparse <- data.matrix(train)
test = data[data$PassengerId  %in% df_test$PassengerId,]
test_ids <- test[,PassengerId]
test[,Survived:=NULL]
test[,PassengerId:=NULL]
test_sparse <- data.matrix(test)
dtrain <- xgb.DMatrix(data=train_sparse, label=y_train)
dtest <- xgb.DMatrix(data=test_sparse);
param <- list(booster = "gbtree",
eval_metric = "auc",
objective = "binary:logistic",
eta = .11,
gamma = 1,
max_depth = 6,
min_child_weight = 1,
subsample = .7,
colsample_bytree = .7)
for(random.seed.num in 1:10) {
print(paste("[", random.seed.num , "] training xgboost begin ",sep=""," : ",Sys.time()))
set.seed(random.seed.num)
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 1,
print_every_n = 5)
vpreds = predict(xgb_model,dtest)
mpreds = cbind(mpreds, vpreds)
colnames(mpreds)[random.seed.num+1] = paste("pred_seed_", random.seed.num, sep="")
}
mpreds_2 = mpreds[, id:= NULL]
mpreds_2 = mpreds_2[, y := rowMeans(.SD)]
mpreds_2[mpreds_2$y <= 0.5,"x"] <- 0
mpreds_2[mpreds_2$y > 0.5,"x"] <- 1
submission = data.table(PassengerId=test_ids, Survived=mpreds_2$x)
write.table(submission, "titanic_xgboost.csv", sep=",", dec=".", quote=FALSE, row.names=FALSE)
for(random.seed.num in 1:10) {
print(paste("[", random.seed.num , "] training xgboost begin ",sep=""," : ",Sys.time()))
set.seed(random.seed.num)
xgb_model <- xgb.train(data = dtrain,
params = param,
watchlist = list(train = dtrain),
nrounds = rounds,
verbose = 1,
print_every_n = 5)
vpreds = predict(xgb_model,dtest)
mpreds = cbind(mpreds, vpreds)
colnames(mpreds)[random.seed.num+1] = paste("pred_seed_", random.seed.num, sep="")
}
param <- list(objective   = "binary:logistic",
eval_metric = "error",
max_depth   = 7,
eta         = 0.1,
gammma      = 1,
colsample_bytree = 0.5,
min_child_weight = 1)
set.seed(1234)
# Pass in our hyperparameteres and train the model
system.time(xgb <- xgboost(params  = param,
data    = dtrain,
label   = y_train,
nrounds = 500,
print_every_n = 100,
verbose = 1))
View(data)
pred <- predict(xgb, dtest)
pred
pred.resp <- ifelse(pred >= 0.5, 1, 0)
pred.resp
pred2 <- predict(xgb, dtrain)
pred2.resp <- ifelse(pred2 >= 0.5, 1, 0)
pred2.resp
for(i in c(1:891)){
if(pred2.resp[i] == data$survived[i]){
success <- success + 1
}
}
print(success / 1000)
View(data)
for(i in c(1:891)){
if(pred2.resp[i] == data$Survived[i]){
success <- success + 1
}
}
print(success / 1000)
success <- 0
for(i in c(1:891)){
if(pred2.resp[i] == data$Survived[i]){
success <- success + 1
}
}
print(success / 1000)
data$Pclass <- factor(data$Pclass)
data$Sex <- factor(data$SibSp)
data$Parch <- factor(data$Parch)
data$Embarked <- factor(data$Embarked)
data$Title <- factor(data$Title)
data$FsizeD <- factor(data$FsizeD)
data$isAlone <- factor(data$isAlone)
data$Fsize <- factor(data$Fsize)
View(data)
train <- data[1:891,]
test <- data[892:1309,]
View(test)
model <- cforest(factor(Survived) ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FsizeD + isAlone + Fsize, data = train)
library(randomForest)
set.seed(102)
model <- cforest(factor(Survived) ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FsizeD + isAlone + Fsize, data = train)
library(party)
library(corrplot)
set.seed(102)
model <- cforest(factor(Survived) ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FsizeD + isAlone + Fsize, data = train)
predict1 <- predict(model, test,  OOB=TRUE, type = "response")
predict1
predict2 <- predict(model, train,  OOB=TRUE, type = "response")
predict2
success <- 0
for(i in c(1:891)){
if(predict2[i] == data$survived[i]){
success <- success + 1
}
}
print(success / 1000)
success <- 0
for(i in c(1:891)){
if(predict2[i] == data$Survived[i]){
success <- success + 1
}
}
print(success / 1000)
View(data)
library(data.table)
library(Matrix)
library(xgboost)
library(caret)
library(dplyr)
library(randomForest)
library(party)
library(corrplot)
df_train <- fread('train.csv', sep=",", na.strings = "NA")
df_test  <- fread('test.csv' , sep=",", na.strings = "NA")
df_test[is.na(df_test$Age),"Age"] <- mean(df_test$Age, na.rm = TRUE)
df_train[is.na(df_train$Age),"Age"] <- mean(df_train$Age, na.rm = TRUE)
df_test[is.na(df_test$Age),"Age"] <- mean(df_test$Age, na.rm = TRUE)
df_train[is.na(df_train$Age),"Age"] <- mean(df_train$Age, na.rm = TRUE)
data = rbind(df_train,df_test,fill=T)
View(data)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
data$Title[data$Title == 'Mlle']        <- 'Miss'
data$Title[data$Title == 'Ms']          <- 'Miss'
data$Title[data$Title == 'Mme']         <- 'Mrs'
data$Title[data$Title %in% rare_title]  <- 'Rare Title'
View(data)
data$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
View(data)
data$Title[data$Title == 'Mlle']        <- 'Miss'
data$Title[data$Title == 'Ms']          <- 'Miss'
data$Title[data$Title == 'Mme']         <- 'Mrs'
data$Title[data$Title %in% rare_title]  <- 'Rare Title'
data$Surname <- sapply(data$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
View(df_train)
data = rbind(df_train,df_test,fill=T)
data$Title <- gsub('(.*, )|(\\..*)', '', data$Name)
rare_title <- c('Dona', 'Lady', 'the Countess','Capt', 'Col', 'Don',
'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer')
data$Title[data$Title == 'Mlle']        <- 'Miss'
data$Title[data$Title == 'Ms']          <- 'Miss'
data$Title[data$Title == 'Mme']         <- 'Mrs'
data$Title[data$Title %in% rare_title]  <- 'Rare Title'
data$Surname <- sapply(data$Name,
function(x) strsplit(x, split = '[,.]')[[1]][1])
data$Fsize <- data$SibSp + data$Parch + 1
data$FsizeD[data$Fsize == 1] <- 'singleton'
data$FsizeD[data$Fsize < 5 & data$Fsize > 1] <- 'small'
data$FsizeD[data$Fsize > 4] <- 'large'
data$isAlone <- 0
data[data$Fsize == 1,"isAlone"] <- 1
View(data)
View(data)
data <- data[,-c("Ticket","Name","Surname")]
ohe_feats = c('Pclass', "Sex",'SibSp' ,'Parch', 'Embarked', 'Title', 'FsizeD', 'isAlone','Fsize')
ohe_feats
data <- data[,-c("Ticket","Name","Surname")]
ohe_feats = c('Pclass', "Sex",'SibSp' ,'Parch', 'Embarked', 'Title', 'FsizeD', 'isAlone','Fsize')
for (f in ohe_feats){
levels = unique(data[[f]])
data[[f]] = factor(data[[f]], level = levels)
}
ohe_feats
data$Deck <- factor(sapply(data$Cabin, function(x) unlist(strsplit(x, NULL)[[1]][1])))
data <- data[,-c("Ticket","Name","Surname", "Cabin", "Deck")]
ohe_feats = c('Pclass', "Sex",'SibSp' ,'Parch', 'Embarked', 'Title', 'FsizeD', 'isAlone','Fsize')
for (f in ohe_feats){
levels = unique(data[[f]])
data[[f]] = factor(data[[f]], level = levels)
}
ohe_feats
data <- data[,-c("Ticket","Name","Surname")]
ohe_feats = c('Pclass', "Sex",'SibSp' ,'Parch', 'Embarked', 'Title', 'FsizeD', 'isAlone','Fsize')
for (f in ohe_feats){
levels = unique(data[[f]])
data[[f]] = factor(data[[f]], level = levels)
}
train = data[data$PassengerId %in% df_train$PassengerId,]
y_train <- train[!is.na(Survived),Survived]
train = train[,Survived:=NULL]
train = train[,PassengerId:=NULL]
train_sparse <- data.matrix(train)
test = data[data$PassengerId  %in% df_test$PassengerId,]
test_ids <- test[,PassengerId]
test[,Survived:=NULL]
test[,PassengerId:=NULL]
test_sparse <- data.matrix(test)
dtrain <- xgb.DMatrix(data=train_sparse, label=y_train)
dtest <- xgb.DMatrix(data=test_sparse)
y_train
train = data[data$PassengerId %in% df_train$PassengerId,]
y_train <- train[!is.na(Survived),Survived]
train = train[,Survived:=NULL]
train = train[,PassengerId:=NULL]
train_sparse <- data.matrix(train)
test = data[data$PassengerId  %in% df_test$PassengerId,]
test_ids <- test[,PassengerId]
test[,Survived:=NULL]
test[,PassengerId:=NULL]
test_sparse <- data.matrix(test)
dtrain <- xgb.DMatrix(data=train_sparse, label=y_train)
dtest <- xgb.DMatrix(data=test_sparse)
param <- list(objective   = "binary:logistic",
eval_metric = "error",
max_depth   = 7,
eta         = 0.1,
gammma      = 1,
colsample_bytree = 0.5,
min_child_weight = 1)
set.seed(1234)
# Pass in our hyperparameteres and train the model
system.time(xgb <- xgboost(params  = param,
data    = dtrain,
label   = y_train,
nrounds = 500,
print_every_n = 100,
verbose = 1))
pred <- predict(xgb, dtest)
pred.resp <- ifelse(pred >= 0.5, 1, 0)
pred2 <- predict(xgb, dtrain)
pred2.resp <- ifelse(pred2 >= 0.5, 1, 0)
success <- 0
for(i in c(1:891)){
if(pred2.resp[i] == data$Survived[i]){
success <- success + 1
}
}
print(success / 1000)
data$Pclass <- factor(data$Pclass)
data$Sex <- factor(data$SibSp)
data$Parch <- factor(data$Parch)
data$Embarked <- factor(data$Embarked)
data$Title <- factor(data$Title)
data$FsizeD <- factor(data$FsizeD)
data$isAlone <- factor(data$isAlone)
data$Fsize <- factor(data$Fsize)
train <- data[1:891,]
test <- data[892:1309,]
set.seed(102)
model <- cforest(factor(Survived) ~ Pclass + Sex + SibSp + Parch + Embarked + Title + FsizeD + isAlone + Fsize, data = train)
predict1 <- predict(model, test,  OOB=TRUE, type = "response")
predict2 <- predict(model, train,  OOB=TRUE, type = "response")
success <- 0
for(i in c(1:891)){
if(predict2[i] == data$Survived[i]){
success <- success + 1
}
}
print(success / 1000)
