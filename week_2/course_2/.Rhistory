SayHello <- function (name) {
print("Hello", "name")
}
SayHello("Pecu")
SayHello <- function (name) {
print("Hello", name)
}
SayHello("Pecu")
SayHello <- function (name) {
print(name)
}
SayHello("Pecu")
SayHello <- function (name) {
print(Hello name)
}
SayHello("Pecu")
SayHello <- function (name) {
print("Hello" name)
}
SayHello("Pecu")
SayHello <- function (name) {
print("Hello" name)
}
SayHello("Pecu")
SayHello <- function (name) {
print(paste("Hello,", name))
}
SayHello("Pecu")
GetBmi <- function (my.height.cm, my.weight.kg) {
# Create my.height.m by my.height.cm
my.height.m <- (my.height.cm / 10)
# Create my.bmi with BMI(Body Mass Index) formula
my.bmi <- my.weight.kg / (my.height.m * my.height.m)
# Return my.bmi
return (my.bmi)
}
GetBmi(180, 55)
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <-
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi()
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg
GetLargest <- function (vector) {
print(paste("The Largest Number is :", max(vector)))
}
vec_1 <- c(1, 5, 10, 200, 2000, 121)
GetLargest(vec_1)
CheckBmiLevel <- function (my.height.cm, my.weight.kg) {
# Call the GetBmi function we just made
my.bmi <- GetBmi(my.height.cm, my.weight.kg)
if (my.bmi >= 35) {
return(paste("Your bmi: ", my.bmi, ", 重度肥胖!"))
} else if (my.bmi >= 30) {
return(paste("Your bmi: ", my.bmi, ", 中度肥胖!"))
} else if (my.bmi >= 27) {
return(paste("Your bmi: ", my.bmi, ", 輕度肥胖!"))
} else if (my.bmi >= 24) {
return(paste("Your bmi: ", my.bmi, ", 過重!"))
} else if (my.bmi >= 18.5) {
return(paste("Your bmi: ", my.bmi, ", 正常範圍"))
} else {
return(paste("Your bmi: ", my.bmi, ", 過輕!"))
}
}
bmi.level.msg <- CheckBmiLevel(176, 70)
bmi.level.msg
df <- read.table('test_data.csv', sep = ",", header = TRUE, stringsAsFactors = F)
df
df$School <- as.factor(df$School)
df$Sex <- as.factor(df$Sex)
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
df
str(df)
df$Grade[NA] <- 990
df$Grade
df$Grade[11] <- 990
df$Grade
str(df)
names(df)[Grade] <- "ToeicGrade"
Height <- c(179, 165, 158, 165, 172, 170, 168, 163, 169, 155)
Weight <- c(69, 62, 46, 50, 72, 70, 52, 49, 63, 49)
Kobe <- c("Kobe", "A", "M", NA, 39, 198, 96)
# 使用cbind()，新增Height與Weight至df為欄(column)資料
df <- cbind(df, Height, Weight)
# 使用rbind()，新增kobe至df為列(row)資料
df <- rbind(df, Kobe)
# 重新使用str()檢查一次df的結構時...
# Age, Grade, Height, Weight都變成chr型態了?? <- 被kobe資料
str(df)
# kobe的Grade資料出現了NA值，請將其重新設定為990分。
df$Grade[11] <- 990
# 轉換df欄位的資料型態 # Grade: integer, Age, Height, Weight: numeric
df$Grade <- as.integer(df$Grade)
df$Age <- as.numeric(df$Age)
df$Height <- as.numeric(df$Height)
df$Weight <- as.numeric(df$Weight)
# 查看df結構，是否是轉換完畢結果
str(df)
# 使用order()，以df$Grade將df遞減排序
df <- df[order(df$Grade, decreasing = TRUE), ]
# 使用subset()，刪除df$Age欄位(另一種方式df$Age <- NULL)
df <- subset(df, select = c(-Age))
# 使用names()，重新將Grade欄位命名為ToeicGrade
names(df)[Grade] <- "ToeicGrade"
names(df)[4] <- "ToeicGrade"
df
df[df$School == A, ]
df[df$School == ,A ]
df[df$School == A ]
df[df$School == A, ]
df[df$School == "A", ]
df$ToeicLevel <- cut(x = df$ToeicGrade,
breaks = c(0, 600, 700, 800, 900, Inf),
labels = c("E", "D", "C", "B", "A"))
df
df$Bmi <- mapply(GetBmi, df$Height, df$Weight)
df$Bmi
rm(list = ls())
library(rvest)
install.packages("rvest")
page.source <- read_html("https://en.wikipedia.org/wiki/R_(programming_language)")
library(rvest)
R.Version
R.Version()
library(installr)
updateR()
install.packages("installr")
library(installr)
updateR()
updateR()
library(rvest)
TRUE
library(rvest)
library(xml2)
library(rvest)
page.source <- read_html("https://en.wikipedia.org/wiki/R_(programming_language)")
version.block <- html_nodes(page.source, ".wikitable th+ td , th:nth-child(2) , .wikitable th:nth-child(1)")
head(version.block)
version.block <- html_nodes(page.source, "th:nth-child(2) , th+ td , th:nth-child(1)")
head(version.block)
version.block <- html_nodes(page.source, ".wikitable th+ td , th:nth-child(2) , .wikitable th:nth-child(1)")
head(version.block)
content <- html_text(version.block)
html_text
content
rm(list = ls())
library(rvest)
