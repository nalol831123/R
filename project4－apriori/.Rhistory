head(data)
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
tital <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
title <- rbind(title, as.matrix(title.list))
}
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
title <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
title <- rbind(title, as.matrix(title.list))
}
data <- list()
title <- list()
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
title <- rbind(title, as.matrix(title.list))
}
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
}
data <- unlist(data)
head(data)
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
title <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
title.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlValue)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
title <- rbind(title, as.matrix(title.list))
}
data <- unlist(data)
title <- unlist(title)
head(data)
head(title)
Hito <- c()
Hito.url <- c()
HitoT <- grep("綜藝大熱門", title)
Hito <- title[HitoT]
Hito.url <- data[HitoT]
SB <- c()
SB.url <- c()
SBT <- grep("小明星大跟班", title)
SB <- title[SBT]
SB.url <- data[SBT]
Hito <- c()
Hito.url <- c()
HitoT <- grep("綜藝大熱門", title)
Hito <- c(Hito,title[HitoT])
Hito.url <- c(Hito.url, data[HitoT])
SB <- c()
SB.url <- c()
SBT <- grep("小明星大跟班", title)
SB <- c(SB,title[SBT])
SB.url <- c(SB.url, data[SBT])
message <- list()
cc = worker()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
for(i in c(1:length(SB))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
SBTDF <- abc}
else{
SBTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
message <- list()
cc = worker()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
for(i in c(1:length(SB))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
SBTDF <- abc}
else{
SBTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
for(i in c(1:length(SB))){
html <- htmlParse(GET(SB.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
SBTDF <- abc}
else{
SBTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
LBJTDF[is.na(LBJTDF)] <- 0
HitoTDF[is.na(HitoTDF)] <- 0
SBTDF[is.na(SBTDF)] <- 0
library(knitr)
kable(head(HitoTDF))
kable(head(SBTDF))
kable(tail(HitoTDF))
kable(tail(SBTDF))
kable(head(SBTDF))
kable(head(HitoTDF))
kable(head(HitoTDF))
kable(tail(HitoTDF))
kable(head(SBTDF))
kable(tail(SBTDF))
n <- length(Hito)
tf1 <- apply(as.matrix(HitoTDF[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal1 <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf1 <- apply(as.matrix(HitoTDF[,2:(n+1)]), 1, idfCal1)
doc1.tfidf <- HitoTDF
for(x in 1:nrow(HitoTDF))
{
for(y in 2:ncol(HitoTDF))
{
doc1.tfidf[x,y] <- (doc1.tfidf[x,y] / tf1[y-1]) * idf1[x]
}
}
n <- length(SB)
tf2 <- apply(as.matrix(SBTDF[,2:(n+1)]), 2, sum)
n <- length(Hito)
tf1 <- apply(as.matrix(HitoTDF[,2:(n+1)]), 2, sum)
library(Matrix)
idfCal1 <- function(word_doc)
{
log2( n / nnzero(word_doc) )
}
idf1 <- apply(as.matrix(HitoTDF[,2:(n+1)]), 1, idfCal1)
doc1.tfidf <- HitoTDF
for(x in 1:nrow(HitoTDF))
{
for(y in 2:ncol(HitoTDF))
{
doc1.tfidf[x,y] <- (doc1.tfidf[x,y] / tf1[y-1]) * idf1[x]
}
}
n <- length(SB)
tf2 <- apply(as.matrix(SBTDF[,2:(n+1)]), 2, sum)
m <- length(SB)
tf2 <- apply(as.matrix(SBTDF[,2:(m+1)]), 2, sum)
library(Matrix)
m <- length(SB)
tf2 <- apply(as.matrix(SBTDF[,2:(m+1)]), 2, sum)
View(SBTDF)
View(HitoTDF)
library(bitops)
library(httr)
library(RCurl)
library(XML)
library(NLP)
library(tm)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(dplyr)
Hito <- c()
Hito.url <- c()
HitoT <- grep("綜藝大熱門", title)
Hito <- c(Hito,title[HitoT])
Hito.url <- c(Hito.url, data[HitoT])
SB <- c()
SB.url <- c()
SBT <- grep("小明星大跟班", title)
SB <- c(SB,title[SBT])
SB.url <- c(SB.url, data[SBT])
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
library(jiebaR)
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
library(jiebaR)
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
for(i in c(1:length(SB))){
html <- htmlParse(GET(SB.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
SBTDF <- abc}
else{
SBTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
install.packages("jiebaR")
install.packages("jiebaR")
library(jiebaR)
library(jiebaRD)
library(jiebaR)
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
library(bitops)
library(httr)
library(RCurl)
library(XML)
library(NLP)
library(tm)
library(tmcn)
library(jiebaRD)
library(jiebaR)
library(dplyr)
from <- 485
to   <- 501
prefix = "https://www.ptt.cc/bbs/TW_Entertain/index"
data <- list()
title <- list()
for (id in c(from:to))
{
url <- paste0(prefix, as.character(id), ".html" )
html<- htmlParse(GET(url))
url.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlAttrs)
title.list <- xpathSApply(html, "//div[@class='title']/a[@href]", xmlValue)
data <- rbind(data, as.matrix(paste("www.ptt.cc", url.list, sep='')))
title <- rbind(title, as.matrix(title.list))
}
data <- unlist(data)
title <- unlist(title)
head(data)
head(title)
Hito <- c()
Hito.url <- c()
HitoT <- grep("綜藝大熱門", title)
Hito <- c(Hito,title[HitoT])
Hito.url <- c(Hito.url, data[HitoT])
SB <- c()
SB.url <- c()
SBT <- grep("小明星大跟班", title)
SB <- c(SB,title[SBT])
SB.url <- c(SB.url, data[SBT])
message <- list()
HitoTDF <- data.frame()
SBTDF <- data.frame()
for(i in c(1:length(Hito))){
html <- htmlParse(GET(Hito.url[i]),encoding = "UTF-8")
message.list <- xpathSApply(html, "//div[@class='push']/span[@class='f3 push-content']", xmlValue)
message <- unlist(message.list)
d.corpus <- VCorpus( VectorSource(message) )
d.corpus <- tm_map(d.corpus, removePunctuation)
d.corpus <- tm_map(d.corpus, removeNumbers)
d.corpus <- tm_map(d.corpus, function(word) {
gsub("[A-Za-z0-9]", "", word)
})
abc <- data.frame(table(cc[as.character(d.corpus)]))
colnames(abc) <- c("word", as.character(i))
if(i == 1){
HitoTDF <- abc}
else{
HitoTDF <- merge(HitoTDF, abc, by = "word", all = T)}
}
pr <- predict(model, test,  OOB=TRUE, type = "response")
setwd("C:/Users/User/Desktop/R/R/project4－apriori")
kobe <- read.csv("kobedata.csv")
kobe <- read.csv("kobedata.csv")
kobe <- na.omit(kobe)
table(is.na(kobe))
library(dplyr)
kb <- kobe[ ,c("game_event_id","seconds_remaining","shot_zone_basic","shot_type","shot_made_flag")]
kb <- kobe[ ,c("game_event_id","seconds_remaining","shot_zone_basic","shot_type","shot_made_flag")]
kb <- kb[order(kb$game_event_id),]
kb2$seconds_remaining <- as.factor(kb2$seconds_remaining)
kb$seconds_remaining <- as.factor(kb$seconds_remaining)
kb$shot_made_flag <- as.factor(kb$shot_made_flag)
require(arules)
kbrule <- apriori(kb2,
# min support & confidence, 最小規則長度(lhs+rhs)
parameter=list(minlen=3, supp=0.1, conf=0.6),
appearance = list(default="lhs",
rhs=c("shot_made_flag=0", "shot_made_flag=1")
# 右手邊顯示的特徵
)
)
require(arules)
kbrule <- apriori(kb,
# min support & confidence, 最小規則長度(lhs+rhs)
parameter=list(minlen=3, supp=0.1, conf=0.6),
appearance = list(default="lhs",
rhs=c("shot_made_flag=0", "shot_made_flag=1")
# 右手邊顯示的特徵
)
)
View(kb)
kb <- kobe[ ,c("seconds_remaining","shot_zone_basic","shot_type","shot_made_flag")]
kb <- kb[order(kb$game_event_id),]
View(kb)
kb$seconds_remaining <- as.factor(kb$seconds_remaining)
kb$shot_made_flag <- as.factor(kb$shot_made_flag)
require(arules)
kbrule <- apriori(kb,
# min support & confidence, 最小規則長度(lhs+rhs)
parameter=list(minlen=3, supp=0.1, conf=0.6),
appearance = list(default="lhs",
rhs=c("shot_made_flag=0", "shot_made_flag=1")
# 右手邊顯示的特徵
)
)
inspect(kbrule)
require(arules)
kbrule <- apriori(kb,
# min support & confidence, 最小規則長度(lhs+rhs)
parameter=list(minlen=3, supp=0.1, conf=0.5),
appearance = list(default="lhs",
rhs=c("shot_made_flag=0", "shot_made_flag=1")
# 右手邊顯示的特徵
)
)
inspect(kbrule)
sort.kbrule <- sort(kbrule, by="lift")
inspect(sort.kbrule)
subset.matrix <- as.matrix(is.subset(x=sort.kbrule, y=sort.kbrule))
subset.matrix[lower.tri(subset.matrix, diag=T)] <- NA
redundant <- colSums(subset.matrix, na.rm=T) >= 1
sort.kbrule <- sort.kbrule[!redundant]
inspect(sort.kbrule)
require(arulesViz)
plot(kbrule)
plot(kbrule, method="graph", control=list(type="items"))
plot(kbrule, method="grouped")
